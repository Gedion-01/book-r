// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  OWNER
  USER
}

enum UserStatus {
  ACTIVE
  DISABLED
}

enum BookStatus {
  RENTED
  FREE
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  location     String
  phone        String        @unique
  password     String
  role         Role          @default(USER)
  books        Book[]        @relation("OwnerBooks")
  transactions Transaction[] @relation("TransactionOwner")
  status       UserStatus    @default(ACTIVE)
  isApproved   Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Book {
  id           String        @id @default(cuid())
  title        String
  author       String
  quantity     Int
  status       BookStatus    @default(FREE)
  owner        User          @relation("OwnerBooks", fields: [ownerId], references: [id])
  ownerId      String
  rentPrice    Float
  bookImageUrl String
  transactions Transaction[] @relation("BookToTransaction")
  isApproved   Boolean       @default(false)
  createdAt    DateTime      @default(now())

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  updatedAt DateTime @updatedAt
}

model Category {
  id    String @id @default(uuid())
  name  String @unique
  books Book[]
}

model Transaction {
  id         String    @id @default(cuid())
  type       String
  bookId     String
  user       User      @relation(fields: [userId], references: [id], name: "TransactionOwner") // Clarify the relationship
  userId     String
  price      Float
  rentedAt   DateTime? @default(now())
  returnedAt DateTime?
  book       Book      @relation("BookToTransaction", fields: [bookId], references: [id])

  @@unique([bookId, userId], name: "UniqueBookRental")
}
